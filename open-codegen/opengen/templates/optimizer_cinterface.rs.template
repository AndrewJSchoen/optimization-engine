{% if activate_clib_generation -%}
/// Solver cache
#[allow(non_camel_case_types)]
pub struct {{meta.optimizer_name}}Cache {
    cache: HomotopyCache,
}

impl {{meta.optimizer_name}}Cache {
    pub fn new(cache: HomotopyCache) -> Self {
        {{meta.optimizer_name}}Cache { cache }
    }
}

/// {{meta.optimizer_name}} version of ExitStatus
#[allow(non_camel_case_types)]
#[repr(C)]
pub enum {{meta.optimizer_name}}ExitStatus {
    /// The algorithm has converged
    ///
    /// All termination criteria are satisfied and the algorithm
    /// converged within the available time and number of iterations
    {{meta.optimizer_name}}Converged,
    /// Failed to converge because the maximum number of iterations was reached
    {{meta.optimizer_name}}NotConvergedIterations,
    /// Failed to converge because the maximum execution time was reached
    {{meta.optimizer_name}}NotConvergedOutOfTime,
    /// If the gradient or cost function cannot be evaluated internally
    {{meta.optimizer_name}}NotConvergedCost,
    /// Computation failed and NaN/Infinite value was obtained
    {{meta.optimizer_name}}NotConvergedNotFiniteComputation,
}

/// {{meta.optimizer_name}} version of HomotopySolverStatus
#[repr(C)]
pub struct {{meta.optimizer_name}}SolverStatus {
    /// Exit status
    exit_status: {{meta.optimizer_name}}ExitStatus,
    /// Number of outer iterations
    num_outer_iterations: c_ulong,
    /// Total number of inner iterations
    ///
    /// This is the sum of the numbers of iterations of
    /// inner solvers
    num_inner_iterations: c_ulong,
    /// Norm of the fixed-point residual of the the problem
    last_problem_norm_fpr: c_double,
    /// Maximum constraint violation
    max_constraint_violation: c_double,
    /// Total solve time
    solve_time_ns: c_ulonglong,
}

/// Allocate memory and setup the solver
#[no_mangle]
pub extern "C" fn {{meta.optimizer_name|lower}}_new() -> *mut {{meta.optimizer_name}}Cache {
    Box::into_raw(Box::new({{meta.optimizer_name}}Cache::new(initialize_solver())))
}

/// Run the solver on the input and parameters
#[no_mangle]
pub extern "C" fn {{meta.optimizer_name|lower}}_solve(
    instance: *mut {{meta.optimizer_name}}Cache,
    u: *mut c_double,
    params: *const c_double,
) -> {{meta.optimizer_name}}SolverStatus {
    // Convert all pointers into the required data structures
    let instance: &mut {{meta.optimizer_name}}Cache = unsafe {
        assert!(!instance.is_null());
        &mut *instance
    };

    let u = unsafe {
        assert!(!u.is_null());
        std::slice::from_raw_parts_mut(u as *mut f64, {{meta.optimizer_name|upper}}_NUM_DECISION_VARIABLES)
    };

    let params = unsafe {
        assert!(!params.is_null());
        std::slice::from_raw_parts(params as *const f64, {{meta.optimizer_name|upper}}_NUM_PARAMETERS)
    };

    let status = solve(params,&mut instance.cache, u);

    match status {
        Ok(status) => {{meta.optimizer_name}}SolverStatus {
            exit_status: match status.exit_status() {
                core::ExitStatus::Converged => {{meta.optimizer_name}}ExitStatus::{{meta.optimizer_name}}Converged,
                core::ExitStatus::NotConvergedIterations => {{meta.optimizer_name}}ExitStatus::{{meta.optimizer_name}}NotConvergedIterations,
                core::ExitStatus::NotConvergedOutOfTime => {{meta.optimizer_name}}ExitStatus::{{meta.optimizer_name}}NotConvergedOutOfTime,
            },
            num_outer_iterations: status.num_outer_iterations() as c_ulong,
            num_inner_iterations: status.num_inner_iterations() as c_ulong,
            last_problem_norm_fpr: status.last_problem_norm_fpr(),
            max_constraint_violation: status.max_constraint_violation(),
            solve_time_ns: status.solve_time().as_nanos() as c_ulonglong,
        },
        Err(e) => {{meta.optimizer_name}}SolverStatus {
            exit_status: match e {
                SolverError::Cost => {{meta.optimizer_name}}ExitStatus::{{meta.optimizer_name}}NotConvergedCost,
                SolverError::NotFiniteComputation => {{meta.optimizer_name}}ExitStatus::{{meta.optimizer_name}}NotConvergedNotFiniteComputation,
            },
            num_outer_iterations: std::u64::MAX as c_ulong,
            num_inner_iterations: std::u64::MAX as c_ulong,
            last_problem_norm_fpr: std::f64::INFINITY,
            max_constraint_violation: std::f64::INFINITY,
            solve_time_ns: std::u64::MAX as c_ulonglong,
        },
    }
}

/// Deallocate the solver's memory
#[no_mangle]
pub extern "C" fn {{meta.optimizer_name|lower}}_free(instance: *mut {{meta.optimizer_name}}Cache) {
    // Add impl
    unsafe {
        assert!(!instance.is_null());
        Box::from_raw(instance);
    }
}
{% endif %}