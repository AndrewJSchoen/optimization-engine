#include <stdlib.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

#define TRUE 1
#define FALSE 0

/**
 * CasADi function: Workspace sizes for the COST function
 */
extern int {{build_config.cost_function_name or 'phi'}}_work(
	casadi_int *sz_arg,
	casadi_int *sz_res,
	casadi_int *sz_iw,
	casadi_int *sz_w);
/**
 * CasADi function: Workspace sizes for the GRADIENT of the cost
 */
extern int {{build_config.grad_function_name  or 'grad_phi'}}_work(
	casadi_int *sz_arg,
	casadi_int *sz_res,
	casadi_int *sz_iw,
	casadi_int *sz_w);

/**
 * CasADi function: Workspace sizes for the Mapping F1
 */
extern int {{build_config.alm_mapping_f1_function_name}}_work(
	casadi_int *sz_arg,
	casadi_int *sz_res,
	casadi_int *sz_iw,
	casadi_int *sz_w);

/**
 * CasADi function: Workspace sizes for the Mapping F2
 */
extern int {{build_config.constraint_penalty_function_name}}_work(
	casadi_int *sz_arg,
	casadi_int *sz_res,
	casadi_int *sz_iw,
	casadi_int *sz_w);

/* Whether memory has been previously allocated */
static char is_allocated = FALSE;

/*
 * ALLOCATED MEMORY
 */
static casadi_int *allocated_i_workspace_cost = NULL;   /* cost (int ) */
static casadi_real *allocated_r_workspace_cost = NULL;  /* cost (real) */
static casadi_int *allocated_i_workspace_grad = NULL;   /* grad (int ) */
static casadi_real *allocated_r_workspace_grad = NULL;  /* grad (real) */
static casadi_int *allocated_i_workspace_f1 = NULL;     /* F1   (int ) */
static casadi_real *allocated_r_workspace_f1 = NULL;    /* F1   (real) */
static casadi_int *allocated_i_workspace_f2 = NULL;     /* F2   (int ) */
static casadi_real *allocated_r_workspace_f2 = NULL;    /* F2   (real) */

/**
 * Allocates memory only the first time it is called
 * Returns 0 if the allocation of memory was successful 
 */
static int allocate_if_not_yet() {
    if (is_allocated) return 0;

	/* 
	 * Number of input/output arguments of CasADi args 
	 * (but these are known already)
	 */
	casadi_int sz_arg = 0;
	casadi_int sz_res = 0;

	/* Sizes for cost function */
	casadi_int sz_iw_cost = 0;
	casadi_int sz_w_cost = 0;

	/* Sizes for gradient */
	casadi_int sz_iw_grad = 0;
	casadi_int sz_w_grad = 0;

	/* Sizes for F1 */
	casadi_int sz_iw_f1 = 0;
	casadi_int sz_w_f1 = 0;

	/* Sizes for F2 */
	casadi_int sz_iw_f2 = 0;
	casadi_int sz_w_f2 = 0;

	/* Obtain sizes */
	{{build_config.cost_function_name or 'phi'}}_work(&sz_arg, &sz_res, &sz_iw_cost, &sz_w_cost);
	{{build_config.grad_function_name  or 'grad_phi'}}_work(&sz_arg, &sz_res, &sz_iw_grad, &sz_w_grad);
	{{build_config.alm_mapping_f1_function_name}}_work(&sz_arg, &sz_res, &sz_iw_f1, &sz_w_f1);
	{{build_config.constraint_penalty_function_name}}_work(&sz_arg, &sz_res, &sz_iw_f2, &sz_w_f2);


	/*
	 * Allocate memory (if not allocated previously)
	 */

    /* Allocate memory for cost function */
    allocated_i_workspace_cost = (casadi_int*)malloc(sz_iw_cost*sizeof(casadi_int));
    if (sz_iw_cost > 0 && allocated_i_workspace_cost == NULL) goto fail_1;
    allocated_r_workspace_cost = (casadi_real*)malloc(sz_w_cost*sizeof(casadi_real));
    if (sz_w_cost > 0 && allocated_r_workspace_cost == NULL) goto fail_2;

    /* Allocate memory for gradient */
    allocated_i_workspace_grad = (casadi_int*)malloc(sz_iw_grad*sizeof(casadi_int));
    if (sz_iw_grad > 0 && allocated_i_workspace_grad == NULL) goto fail_3;
    allocated_r_workspace_grad = (casadi_real*)malloc(sz_w_grad*sizeof(casadi_real));
    if (sz_w_grad > 0 && allocated_r_workspace_grad == NULL) goto fail_4;

    /* Allocate memory for F1 */
    allocated_i_workspace_f1 = (casadi_int*)malloc(sz_iw_f1*sizeof(casadi_int));
    if (sz_iw_f1 > 0 && allocated_i_workspace_f1 == NULL) goto fail_5;
    allocated_r_workspace_f1 = (casadi_real*)malloc(sz_w_f1*sizeof(casadi_real));
    if (sz_w_f1 > 0 && allocated_r_workspace_f1 == NULL) goto fail_6;

    /* Allocate memory for F2 */
    allocated_i_workspace_f2 = (casadi_int*)malloc(sz_iw_f2*sizeof(casadi_int));
    if (sz_iw_f2 > 0 && allocated_i_workspace_f2 == NULL) goto fail_7;
    allocated_r_workspace_f2 = (casadi_real*)malloc(sz_w_f2*sizeof(casadi_real));
    if (sz_w_f2 > 0 && allocated_r_workspace_f2 == NULL) goto fail_8;


	/* All memory has been allocated; it shouldn't be re-allocated */
	is_allocated = TRUE;

	return 0;

	/* Free memory that has been previously allocated (failure!) */
	fail_8:
		free(allocated_i_workspace_f2);
	fail_7:
		free(allocated_r_workspace_f1);
	fail_6:
		free(allocated_i_workspace_grad);
	fail_5:
		free(allocated_r_workspace_grad);
	fail_4:
		free(allocated_i_workspace_grad);
	fail_3:
		free(allocated_r_workspace_cost);
	fail_2:
		free(allocated_i_workspace_cost);
	fail_1:
		return 1;
}

/** 
 * Initialise the memory
 */
int init_{{build_config.id or '0'}}() {
	/* The first time we call this method, it will allocate memory */
	if (!is_allocated){
	  return allocate_if_not_yet();
	}
	/* Otherwise, it will do nothing and will return 0 (success) */
	return 0;
}

/** 
 * Destroy all allocated memory
 */
int destroy_{{build_config.id or '0'}}() {
	/* If no memory has been allocated, return 0 (success) */
	if (!is_allocated) return 0;
	if (allocated_i_workspace_cost != NULL) free(allocated_i_workspace_cost);
	if (allocated_r_workspace_cost != NULL) free(allocated_r_workspace_cost);
	if (allocated_i_workspace_grad != NULL) free(allocated_i_workspace_grad);
	if (allocated_r_workspace_grad != NULL) free(allocated_r_workspace_grad);
	if (allocated_i_workspace_f1 != NULL) free(allocated_i_workspace_f1);
	if (allocated_r_workspace_f1 != NULL) free(allocated_r_workspace_f1);
	if (allocated_i_workspace_f2 != NULL) free(allocated_i_workspace_f2);
	if (allocated_r_workspace_f2 != NULL) free(allocated_r_workspace_f2);

	return 0;
}


/* ------COST------------------------------------------------------------------- */

/** 
 * Integer-type workspace for COST
 */
casadi_int * allocated_{{build_config.cost_function_name or 'phi'}}_iwork() {
	allocate_if_not_yet();
	return allocated_i_workspace_cost;
}

/** 
 * Real-type workspace for COST
 */
casadi_real * allocated_{{build_config.cost_function_name or 'phi'}}_rwork() {
	allocate_if_not_yet();
	return allocated_r_workspace_cost;
}


/* ------GRADIENT--------------------------------------------------------------- */

/** 
 * Integer-type workspace for GRADient
 */
casadi_int * allocated_{{build_config.grad_function_name  or 'grad_phi'}}_iwork() {
	allocate_if_not_yet();
	return allocated_i_workspace_grad;
}

/** 
 * Real-type workspace for GRADient
 */
casadi_real * allocated_{{build_config.grad_function_name  or 'grad_phi'}}_rwork() {
	allocate_if_not_yet();
	return allocated_r_workspace_grad;
}


/* ------MAPPING F1------------------------------------------------------------- */

/** 
 * Integer-type workspace for F1
 */
casadi_int * allocated_{{build_config.alm_mapping_f1_function_name}}_iwork() {
	allocate_if_not_yet();
	return allocated_i_workspace_f1;
}

/** 
 * Real-type workspace for F1
 */
casadi_real * allocated_{{build_config.alm_mapping_f1_function_name}}_rwork() {
	allocate_if_not_yet();
	return allocated_r_workspace_f1;
}


/* ------MAPPING F2------------------------------------------------------------- */

/** 
 * Integer-type workspace for F2
 */
casadi_int * allocated_{{build_config.constraint_penalty_function_name}}_iwork() {
	allocate_if_not_yet();
	return allocated_i_workspace_f2;
}

/** 
 * Real-type workspace for F2
 */
casadi_real * allocated_{{build_config.constraint_penalty_function_name}}_rwork() {
	allocate_if_not_yet();
	return allocated_r_workspace_f2;
}
